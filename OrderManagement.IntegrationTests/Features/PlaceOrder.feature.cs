// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace OrderManagement.IntegrationTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CreateOrderFeature : object, Xunit.IClassFixture<CreateOrderFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "PlaceOrder.feature"
#line hidden
        
        public CreateOrderFeature(CreateOrderFeature.FixtureData fixtureData, OrderManagement_IntegrationTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Create Order", "  As a registered user, I want to create an order with products so that I can rec" +
                    "eive them at the correct time.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="TC1 - Valid order with available stock")]
        [Xunit.TraitAttribute("FeatureTitle", "Create Order")]
        [Xunit.TraitAttribute("Description", "TC1 - Valid order with available stock")]
        public void TC1_ValidOrderWithAvailableStock()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TC1 - Valid order with available stock", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    testRunner.Given("a user exists with ID \"f7cc96ba-e07a-4717-bcd0-3eff479b55ea\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProductId",
                            "Name",
                            "Stock"});
                table1.AddRow(new string[] {
                            "f2aa11bb-3ac2-4d13-887e-123456789abc",
                            "Laptop",
                            "5"});
                table1.AddRow(new string[] {
                            "c8ddaaee-8dcb-4f6e-aaa1-abcdefabcdef",
                            "Monitor",
                            "10"});
#line 6
    testRunner.And("the following products exist with stock:", ((string)(null)), table1, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProductId",
                            "Quantity"});
                table2.AddRow(new string[] {
                            "f2aa11bb-3ac2-4d13-887e-123456789abc",
                            "2"});
                table2.AddRow(new string[] {
                            "c8ddaaee-8dcb-4f6e-aaa1-abcdefabcdef",
                            "1"});
#line 10
    testRunner.When("the user creates an order with the following items:", ((string)(null)), table2, "When ");
#line hidden
#line 14
    testRunner.Then("the order should be created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
    testRunner.And("the stock should be updated accordingly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="TC2 - Invalid user")]
        [Xunit.TraitAttribute("FeatureTitle", "Create Order")]
        [Xunit.TraitAttribute("Description", "TC2 - Invalid user")]
        public void TC2_InvalidUser()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TC2 - Invalid user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
    testRunner.When("an order is created with user ID \"f7cc96ba-e07a-4717-bcd0-3eff479b55ea\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
    testRunner.Then("an error \"User f7cc96ba-e07a-4717-bcd0-3eff479b55ea not found.\" should be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="TC3 - Product does not exist")]
        [Xunit.TraitAttribute("FeatureTitle", "Create Order")]
        [Xunit.TraitAttribute("Description", "TC3 - Product does not exist")]
        public void TC3_ProductDoesNotExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TC3 - Product does not exist", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
    testRunner.Given("a user exists with ID \"f7cc96ba-e07a-4717-bcd0-3eff479b55ea\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProductId",
                            "Quantity"});
                table3.AddRow(new string[] {
                            "ac3da5c8-f020-4cbc-9641-6028f2b21805",
                            "2"});
#line 23
    testRunner.When("the user creates an order with the following items:", ((string)(null)), table3, "When ");
#line hidden
#line 26
    testRunner.Then("an error \"Product with ID ac3da5c8-f020-4cbc-9641-6028f2b21805 not found.\" should" +
                        " be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="TC4 - Product quantity is zero")]
        [Xunit.TraitAttribute("FeatureTitle", "Create Order")]
        [Xunit.TraitAttribute("Description", "TC4 - Product quantity is zero")]
        public void TC4_ProductQuantityIsZero()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TC4 - Product quantity is zero", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 29
    testRunner.Given("a user exists with ID \"f7cc96ba-e07a-4717-bcd0-3eff479b55ea\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProductId",
                            "Name",
                            "Stock"});
                table4.AddRow(new string[] {
                            "f2aa11bb-3ac2-4d13-887e-123456789abc",
                            "TestProduct",
                            "5"});
#line 30
    testRunner.And("the following products exist with stock:", ((string)(null)), table4, "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProductId",
                            "Quantity"});
                table5.AddRow(new string[] {
                            "f2aa11bb-3ac2-4d13-887e-123456789abc",
                            "0"});
#line 33
    testRunner.When("the user creates an order with the following items:", ((string)(null)), table5, "When ");
#line hidden
#line 36
    testRunner.Then("an error \"Quantity for product \'TestProduct\' must be positive.\" should be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="TC5 - Not enough stock")]
        [Xunit.TraitAttribute("FeatureTitle", "Create Order")]
        [Xunit.TraitAttribute("Description", "TC5 - Not enough stock")]
        public void TC5_NotEnoughStock()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TC5 - Not enough stock", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 39
    testRunner.Given("a user exists with ID \"f7cc96ba-e07a-4717-bcd0-3eff479b55ea\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProductId",
                            "Name",
                            "Stock"});
                table6.AddRow(new string[] {
                            "f2aa11bb-3ac2-4d13-887e-123456789abc",
                            "TestProduct",
                            "1"});
#line 40
    testRunner.And("the following products exist with stock:", ((string)(null)), table6, "And ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "ProductId",
                            "Quantity"});
                table7.AddRow(new string[] {
                            "f2aa11bb-3ac2-4d13-887e-123456789abc",
                            "12"});
#line 43
    testRunner.When("the user creates an order with the following items:", ((string)(null)), table7, "When ");
#line hidden
#line 46
    testRunner.Then("an error \"Not enough stock for product \'TestProduct\' (requested: 12, available: 1" +
                        ").\" should be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="TC6 - Created after 16:00")]
        [Xunit.TraitAttribute("FeatureTitle", "Create Order")]
        [Xunit.TraitAttribute("Description", "TC6 - Created after 16:00")]
        public void TC6_CreatedAfter1600()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TC6 - Created after 16:00", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 49
    testRunner.Given("the current time is \"2025-05-08T17:00:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 50
    testRunner.And("a user exists with ID \"user-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
    testRunner.And("the product \"prod-1\" exists with stock 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
    testRunner.When("the user creates an order with quantity 1 for product \"prod-1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
    testRunner.Then("the delivery date should be 3 working days after \"2025-05-09\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CreateOrderFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CreateOrderFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
